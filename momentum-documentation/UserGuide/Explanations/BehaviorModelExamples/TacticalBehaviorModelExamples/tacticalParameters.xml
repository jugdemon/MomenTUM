<!-- A tactical model based on a routing, searching, queuing and participating model. -->
<!-- The id is unique of this model is unique regarding all behavior  models! -->
<!-- The name is a user friendly way to name this model. -->
<!-- The percetualModel provides a reference to the id of a perception model. -->
<tactical id="4" name="tactical"  perceptualModel="0">
	
	<!-- A reference to a routing model by id. -->
	<routingReference modelId="5"/>

	<!-- A reference to a participating model by id. -->
	<stayingReference modelId="6"/>
	
	<!-- A reference to a queuing model by id. -->
	<queuingReference modelId="7"/>
	
	<!-- A reference to a searching model by id. -->
	<searchingReference modelId="8"/>
	
	<!-- The goalDistanceRadius provides the distance at which tactical models see locations as reached. -->
	<!-- This is distance between the center of a pedestrian and the final goal position (where to stop). -->
	<property name="goalDistanceRadius" type="Double" value="0.15" />
	
	<!-- The navigationDistanceRadius models the distance and the parameter for reaching navigations nodes. -->
	<!-- The nodes are typically graph nodes of a routing graph. If there is no previous node the distance is the radius for the reaching the node. -->
	<property name="navigationDistanceRadius" type="Double" value="0.66"/>
	
	<!-- The tacticalControl is mostly set to True and activates "smart" behavior. -->
	<!-- This smart behavior includes to start routing if walking goals of e.g. queuing models are not visible. -->
	<!-- Hence, the tacticalControl helps to reduce nonsense behavior like being "stuck". -->
	<!-- However, do set this to false in case pedestrian should strictly follow a routing path, -->
	<!-- smart behavior leads to taking short-cuts and perception based re-routing. -->
	<!-- Having the tactical control set to true is mandatory for using deep node selection. -->
	<property name="tacticalControl" type="Boolean" value="True"/>
	
	<!-- The deep node selection property helps to realize predictive routing behavior. -->
	<!-- It is used in case that tactical control is set to true. -->
	<!-- The concept here is that the routing model will be called X times (depth value). -->
	<!-- The next navigation node is therefoe selected based on the current X routing result. -->
	<!-- Finaly, the system creates a new routing command based on all routing computations. -->
	<!-- This helps agents to find a next navigation need far away "deep" and the routing is more smooth. -->
	<!-- The behavior may not be desired in any situations, e.g. street crossings. -->
	<property name="deepNodeSelection" type="Integer" value="3"/>
	
	<!-- In some simulations one does not like to include a strategical model. -->
	<!-- For those simulations the agent will get a Do Nothing Command from the non strategical model. -->
	<!-- In order to guide simulations without strategical model set here the command a pedestrian will receive. -->
	<!-- Make sure you have added to corresponding tactical model (e.g. queuing or routing) in the configuration. -->
	<!-- Do not use this if you have a strategical model. -->
	<!-- The given types are:
		 Routing,
		 Staying,
		 Searching,
		 Queuing -->
	<property name="strategicCommand" type="String" value="Routing"/>
	
	<!-- The routeMemory indicates if a pedestrian should remember and avoid already visited route nodes. -->
	<!-- Typically, in linear scenarios that address wayfinding, this is true. -->
	<!-- In system in which the pedestrians visit some location more than once, this is mostly false. -->
	<property name="routeMemory" type="Boolean" value="false"/>
	

</tactical>