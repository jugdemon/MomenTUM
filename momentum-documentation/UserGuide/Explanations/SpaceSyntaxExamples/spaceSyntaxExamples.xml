<simulator version="2.0.2" name="RevitLayouting">

	<!-- Space Syntax is a technique to analyse spatial configurations which is usually applied
	in the context of urban areas. -->
	<!-- Currently, the Space Syntax operation is only intended to be used by the Revit SpaceSyntax Plugin.  -->
	<!-- The operation is calculated in the pre-processing phase. -->
	<!-- An important assumption of this operation is, that the associated layout describes a connected area (e.g. no sub-areas). -->
	<!-- Space Syntax operations are called in pre-processing. -->
	<spaceSyntaxes>
		<spaceSyntaxModel id="5" name="SimpleSpaceSyntax">
			<!-- Currently only the DepthMap operation is supported. -->
			<!-- The DepthMap Operation creates a Visibility Graph according to isovist theory. -->
			<!-- The Visibility Graph is calulated by combining all point isovist graphs. -->
			<spaceSyntaxOperation id="2" name="DepthMapOperation" type="DepthMap">
			
				<!-- It is essential, that the lattice which is associated with a Space Syntax operation
				defines at least one area of type 'Origin'. The origin used to flood the area for which 
				the operation is be applied. If multiple Origins are defined and are not reachable from 
				each other (e.g. by means of a walking pedestrian) the area for which the operation is applied
				is non-deterministic. -->
				<property name="scenarioLatticeId" type="Integer" value="1"/> 
			</spaceSyntaxOperation>
		</spaceSyntaxModel>
	</spaceSyntaxes>
	
	<lattices>
		<!-- A Space Syntax operation needs a lattice which has at least the following configuration. -->
		<!-- Also works with behaviorType="Unsynchronized"-->
		<lattice id="1" scenarioId="0" latticeType="Quadratic" cellEdgeSize="0.2" neighborhoodType="Touching"/>
	</lattices>
	
		<!-- The space syntax writer is currently only intended to pass calculation results
		to the revit space syntax plugin. -->
		<!-- Currently only xml output is supported. -->
		<!-- The xml exports cell indices and meta-data of a 2-dimensional array. -->
		<!-- A cell index in this context is an xml element with an x and y attribute
		corresponding to a 2d array, and a value attribute for that point. -->
		<!-- A cell index is only created, if the index is a walkable tile (e.g. not a wall).-->
		<!-- The exported metadata consists of the
			* layout meta-data: scenarioName, maxX, maxY, minX, minY
			* discretisation: (the number of cells generated between min and max
			influenced by cellEdgeSize value of lattice configuration) domainRows, domainColumns
			* minimum and maximum value: maxValue and minValue regarding the cell index value -->
	<outputWriters>
		<outputWriter id="4" name="spaceSyntaxWriter">
			<!-- We can already output after pre-processing. -->
			<property name="call" type="Integer" value="0"/>
			
			<writerTarget targetType="File">
				<property name="file" type="File" value="./SpaceSyntaxResult.xml"/>
			</writerTarget>
			
			<!-- Result is always printed in xml and only works with the shown configuration. -->
			<writerFormat formatType="Single"/> 
			
			<!-- The additionalId has to match a spaceSyntaxOperation id.  -->
			<writerSource name="spaceSyntaxOperation_DepthMap" sourceType="SpaceSyntax" additionalId="2"/>
		</outputWriter>
	</outputWriters>
	
	<layouts>
		<!-- A link to a layout (preferably) generated by one of the Layouting Plugins (Revit/AutoCAD). -->
		<!-- The layout must provide at least one area of type origin (as mentioned above). -->
		<scenario id="0" layoutLink="C:\Users\Desktop\Layout.xml"/>
	</layouts>
</simulator>